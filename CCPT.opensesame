# Generated by OpenSesame 0.27.4 (Frisky Freud)
# Fri May 16 11:42:04 2014 (posix)
# <http://www.cogsci.nl/opensesame>

set mouse_backend "legacy"
set subject_parity "even"
set transparent_variables "no"
set height "1024"
set font_italic "no"
set synth_backend "legacy"
set title "New experiment"
set coordinates "relative"
set start "experiment"
set sampler_backend "legacy"
set font_family "mono"
set foreground "white"
set font_bold "no"
set description "Default description"
set background "black"
set font_size "30"
set keyboard_backend "legacy"
set canvas_backend "legacy"
set compensation "0"
set bidi "no"
set subject_nr "0"
set width "1280"

define feedback feedback
	set duration "800"
	set reset_variables "yes"
	set description "Provides feedback to the participant"
	draw textline 0 0 "[feedback_message]" center=1 color=[feedback_colour] font_family="mono" font_size=30 font_italic=no font_bold=no show_if="always" html="yes"

define loop training_loop
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "training_sequence"
	set column_order "bogus"
	set cycles "15"
	set order "sequential"
	setcycle 0 bogus ""
	setcycle 1 bogus ""
	setcycle 2 bogus ""
	setcycle 3 bogus ""
	setcycle 4 bogus ""
	setcycle 5 bogus ""
	setcycle 6 bogus ""
	setcycle 7 bogus ""
	setcycle 8 bogus ""
	setcycle 9 bogus ""
	setcycle 10 bogus ""
	setcycle 11 bogus ""
	setcycle 12 bogus ""
	setcycle 13 bogus ""
	setcycle 14 bogus ""
	run training_sequence

define sequence sequence
	run set_trial_variables "always"
	run show_and_collect_response "always"
	run logger "always"

define text_display thank_you
	set foreground "white"
	set font_size "30"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	set content "[thank_you_msg]"
	set background "black"
	set duration "keypress"
	set font_family "mono"

define sketchpad blank
	set duration "600"
	set description "Displays stimuli"

define text_display intro_1
	set foreground "white"
	set font_size "30"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	__content__
	[intro_1_msg]
	__end__
	set background "black"
	set duration "keypress"
	set font_family "mono"

define text_display intro_2
	set foreground "white"
	set font_size "30"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	set content "[intro_2_msg]"
	set background "black"
	set duration "keypress"
	set font_family "mono"

define text_display intro_3
	set foreground "white"
	set font_size "30"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	set content "[intro_3_msg]"
	set background "black"
	set duration "keypress"
	set font_family "mono"

define sketchpad intro_4
	set duration "keypress"
	set description "Displays stimuli"
	draw image 0 0 "stimuli/red_square.png" scale=1 center=1 show_if="always"

define inline_script set_up_variables
	set _run ""
	___prepare__
	language = "de"
	
	if language == "de":
		self.experiment.set("intro_1_msg", """Im folgenden Experiment werden wir Ihnen eine Reihe von Figuren in verschiedenen Farben prU+00E4sentieren. 
	(Weiter mit beliebigem Tastendruck)""")
		self.experiment.set("intro_2_msg","""Wenn Sie ein rotes Quadrat sehen, drU+00FCcken Sie bitte die Leertaste so schnell wie mU+00F6glich.""")
		self.experiment.set("intro_3_msg","""So sieht das rote Quadrat aus.""") 
		self.experiment.set("intro_5_msg","""Wir beginnen mit einem U+00DCbungsdurchgang. DrU+00FCcken Sie eine beliebige Taste, wenn Sie bereit sind. Bitte denken Sie daran, die Leertaste NUR DANN zu drU+00FCcken, wenn Sie ein rotes Quadrat sehen.""")
		self.experiment.set("correct_msg","""richtig""")
		self.experiment.set("incorrect_msg","""falsch""")
		self.experiment.set("intro_6_msg","""Danke! Das ist das Ende des U+00DCbungsdurchgangs.""")
		self.experiment.set("intro_7_msg","""Wir starten jetzt mit dem eigentlichen Experiment. Es wird lU+00E4nger dauern als der U+00DCbungsdurchgang und Sie werden kein Feedback erhalten. Noch einmal, bitte denken Sie daran, die Leertaste NUR DANN zu drU+00FCcken, wenn Sie ein rotes Quadrat sehen. 
	
	DrU+00FCcken Sie jetzt zum Start eine beliebige Taste.""")
		self.experiment.set("NYCQ_intro_msg","""Wir mU+00F6chten Ihnen einige Fragen zu den Gedanken stellen, die Sie wU+00E4hrend des letzten Experiments hatten.
	Auf dem Bildschirm werden Sie gleich Fragen und einen Schieberegler sehen. Benutzen Sie die Tasten 1 und 4 um den Regler zu bewegen und so Ihre Antwort anzugeben.
	Um zur nU+00E4chsten Frage zu gelangen drU+00FCcken Sie bitte die Taste 2 oder 3.""")
		self.experiment.set("thank_you_msg","""Ende. Vielen Dank fU+00FCr die Teilnahme an unserer Studie!""")
	
	else:
		self.experiment.set("intro_1_msg", """In the following experiment we will show you a series of shapes in different colours.
	(press any key to continue)""")
		self.experiment.set("intro_2_msg","""When you will see a red square press space as quickly as possible.""")
		self.experiment.set("intro_3_msg","""This is how the red square looks like.""") 
		self.experiment.set("intro_5_msg","""We will start with a practice run. Press any key whenever you are ready. Remember to press space ONLY when you see a red square!""")
		self.experiment.set("correct_msg","""correct""")
		self.experiment.set("incorrect_msg","""incorrect""")
		self.experiment.set("intro_6_msg","""This concludes the training phase.""")
		self.experiment.set("intro_7_msg","""We will now start with the proper test. It will be longer and there will be no feedback. Remember to only press space when you see a red square.
	
	(press any key to start the test)""")
		self.experiment.set("NYCQ_intro_msg","""We would like to ask you a few questions about the thoughts you had during the last experiment. On the next screens you will see questions and a slider. Use buttons 1 and 4 to move the slider indicating your answer.
	To move to the next question press 2 or 3.""")
		self.experiment.set("thank_you_msg","""Thank you for participating in our study!""")
	__end__
	set description "Executes Python code"

define text_display intro_6
	set foreground "white"
	set font_size "30"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	set content "[intro_6_msg]"
	set background "black"
	set duration "keypress"
	set font_family "mono"

define text_display intro_7
	set foreground "white"
	set font_size "30"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	set content "[intro_7_msg]"
	set background "black"
	set duration "keypress"
	set font_family "mono"

define loop NYCQ_loop
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "NYCQ_sequence"
	set column_order "question_id;question_de;question_en"
	set cycles "12"
	set order "random"
	setcycle 0 question_de "habe ich an etwas Positives gedacht."
	setcycle 0 question_id "positive"
	setcycle 0 question_en "I thought about something positive"
	setcycle 1 question_de "habe ich an etwas Negatives gedacht."
	setcycle 1 question_id "negative"
	setcycle 1 question_en "I thought about something negative "
	setcycle 2 question_de "habe ich an zukU+00FCnftige Ereignisse gedacht."
	setcycle 2 question_id "future"
	setcycle 2 question_en "my thoughts involved future events "
	setcycle 3 question_de "habe ich an vergangene Ereignisse gedacht."
	setcycle 3 question_id "past"
	setcycle 3 question_en "my thoughts involved past events"
	setcycle 4 question_de "habe ich U+00FCber mich selbst nachgedacht."
	setcycle 4 question_id "myself"
	setcycle 4 question_en "my thoughts involved myself"
	setcycle 5 question_de "habe ich an andere Menschen gedacht."
	setcycle 5 question_id "people"
	setcycle 5 question_en "my thoughts involved other people"
	setcycle 6 question_de "habe ich U+00FCber meine derzeitige Umgebung nachgedacht."
	setcycle 6 question_id "surrpundings"
	setcycle 6 question_en "my thoughts involved my surroundings"
	setcycle 7 question_de "war ich vollkommen wach."
	setcycle 7 question_id "vigilance"
	setcycle 7 question_en "I was fully awake"
	setcycle 8 question_de "hatte ich Gedanken in Form von Bildern."
	setcycle 8 question_id "images"
	setcycle 8 question_en "my thoughts were in the form of images"
	setcycle 9 question_de "hatte ich Gedanken in Form von Worten."
	setcycle 9 question_id "words"
	setcycle 9 question_en "my thoughts were in the form of words"
	setcycle 10 question_de "waren meine Gedanken eher spezifisch als vage."
	setcycle 10 question_id "specific_vague"
	setcycle 10 question_en "my thoughts were more specific than vague"
	setcycle 11 question_de "waren meine Gedanken aufdringlich/eindringlich."
	setcycle 11 question_id "intrusive"
	setcycle 11 question_en "my thoughts were intrusive"
	run NYCQ_sequence

define sequence NYCQ_sequence
	run NYCQ_inline_script "always"
	run NYCQ_logger "always"

define sequence experiment
	run set_up_variables "always"
	run intro_1 "always"
	run intro_2 "always"
	run intro_3 "always"
	run intro_4 "always"
	run intro_5 "always"
	run blank "always"
	run shuffle_stimuli_list "always"
	run training_loop "always"
	run intro_6 "always"
	run intro_7 "always"
	run blank "always"
	run shuffle_stimuli_list "always"
	run loop "always"
	run NYCQ_intro "always"
	run NYCQ_loop "always"
	run thank_you "always"

define inline_script set_trial_variables
	set _run ""
	___prepare__
	global shapes
	global timings
	shape = shapes.pop()
	ISI = timings.pop()
	
	self.experiment.set("trial_shape", shape)
	self.experiment.set("trial_ISI", ISI)
	__end__
	set description "Executes Python code"

define inline_script shuffle_stimuli_list
	___run__
	number_of_trials = 320
	shapes = ["red_square"]*(int(0.3*number_of_trials))
	
	for colour in ["yellow", "blue", "green"]:
	    shapes += ["%s_square"%colour]*(int((0.175/3) * number_of_trials))
	shapes += ["yellow_square", "blue_square"]
	
	    
	for shape in ["star", "circle", "triangle"]:
	    shapes += ["red_%s"%shape]*(int((0.175/3) * number_of_trials))
	shapes += ["red_star", "red_circle"]
	
	for colour in ["yellow", "blue", "green"]:
	    for shape in ["star", "circle", "triangle"]:
	        shapes += ["%s_%s"%(colour,shape)]*(int((0.35/(3*3) * number_of_trials)))
	shapes += ["green_triangle", "blue_triangle", "green_circle", "blue_star"]
	
	timings = [1000]*(len(shapes)/4) + [1500]*(len(shapes)/4) + [2000]*(len(shapes)/4) + [2500]*(len(shapes)/4)
	
	random.shuffle(shapes)
	random.shuffle(timings)
	__end__
	___prepare__
	import random
	
	global shapes
	global timings
	__end__
	set description "Executes Python code"

define logger logger
	set ignore_missing "no"
	set description "Logs experimental data"
	set auto_log "no"
	set use_quotes "no"
	log "response"
	log "response_time"
	log "trial_shape"
	log "trial_ISI"

define inline_script NYCQ_inline_script
	___run__
	from openexp.canvas import canvas
	import pygame
	my_canvas = canvas(self.experiment)
	
	slider_w = 500
	slider_h = 40
	slider_x = self.get("width")/2-slider_w/2
	slider_y = self.get("height")/2-slider_h/2
	slider_fill = slider_w/2.0
	step = slider_w/2/10
	
	left_key = pygame.K_1
	right_key = pygame.K_4
	esc_keys = [pygame.K_2, pygame.K_3, pygame.K_ESCAPE]
	
	left_down = False
	right_down = False
	outer_break = False
	while True:
	    events = pygame.event.get()
	    for event in events:
	    
	        if event.type == pygame.KEYDOWN:
	            if event.key in esc_keys:
	                outer_break = True
	            if event.key == left_key:
	                left_down = True
	            if event.key == right_key:
	                right_down = True
	        elif event.type == pygame.KEYUP:
	            if event.key == left_key:
	                left_down = False
	            if event.key == right_key:
	                right_down = False
	        if len(events) == 2:
	            if left_down and slider_fill > 0:
	                slider_fill -= step
	            elif right_down and slider_fill < slider_w:
	                slider_fill += step
	
	    if outer_break:
	        break
	    elif left_down and slider_fill > 0:
	        slider_fill -= step
	    elif right_down and slider_fill < slider_w:
	            slider_fill += step
	
	    my_canvas.clear()
	    if language == "en":
	        my_canvas.text("During the last scan", y=slider_y-200) 
	        my_canvas.text("<b>"+self.get("question_en")+"</b>", y=slider_y-100) 
	        my_canvas.text("Completely did <b>not</b>U+005Cndescribe my experience", y=slider_y+100, x=slider_x)
	        my_canvas.text("Completely didU+005Cndescribe my experience", y=slider_y+100, x=slider_x+slider_w)
	    if language == "de":
	        my_canvas.text("WU+00E4hrend der letzten Messung", y=slider_y-200) 
	        my_canvas.text("<b>"+self.get("question_de")+"</b>", y=slider_y-100) 
	        my_canvas.text("Beschreibt meine GedankenU+005CnU+00FCberhaupt nicht", y=slider_y+100, x=slider_x)
	        my_canvas.text("Beschreibt meine GedankenU+005CnvollstU+00E4ndig", y=slider_y+100, x=slider_x+slider_w)
	    # Draw the slider frame
	    my_canvas.rect(slider_x, slider_y, slider_w, slider_h)
	    # Draw the slider fill
	    my_canvas.rect(slider_x, slider_y, slider_fill, slider_h, fill=True)                
	    # Draw the mouse cursor
	    my_canvas.show()
	    
	slider_percent = 100.0*slider_fill/slider_w     
	self.experiment.set("slider_percent", slider_percent)
	__end__
	set _prepare ""
	set description "Executes Python code"

define text_display NYCQ_intro
	set foreground "white"
	set font_size "30"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	set content "[NYCQ_intro_msg]"
	set background "black"
	set duration "keypress"
	set font_family "mono"

define inline_script show_and_collect_response
	___run__
	from openexp.keyboard import keyboard
	
	# Durations for the two displays
	duration_shape = 100
	duration_blank = self.experiment.get('trial_ISI')
	
	# Displays are copied from sketchpads. To avoid these
	# sketchpads from being shown twice (i.e. once in the 
	# normal way, and once in this inline_script), you can set
	# their 'Run-if' statement to 'never'.
	
	# Create a keyboard object with a zero timeout to allow
	# for continuous polling.
	my_keyboard = keyboard(exp, timeout=0)
	my_keyboard.flush()
	key = None
	
	# Show the first canvas, and poll the keyboard for the
	# specified duration.
	show_time_shape = canvas_shape.show()
	while self.time() - show_time_shape < duration_shape:
		if not key:
			key, time = my_keyboard.get_key()
	
	# Show the second canvas, and poll the keyboard for the
	# specified duration.       
	show_time_blank = canvas_blank.show()
	while self.time() - show_time_blank < duration_blank:
		if not key: 
			key, time = my_keyboard.get_key()
	
	exp.set('response', key)
	if key:
		exp.set('response_time', int(round(time-show_time_shape)))
	else:
		exp.set('response_time', 0)
	__end__
	___prepare__
	from openexp.canvas import canvas
	canvas_shape = canvas(exp)
	canvas_blank = canvas(exp)
	path = exp.get_file("stimuli/%s.png"%exp.get("trial_shape"))
	canvas_shape.image(path)
	__end__
	set description "Executes Python code"

define text_display intro_5
	set foreground "white"
	set font_size "30"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	set content "[intro_5_msg]"
	set background "black"
	set duration "keypress"
	set font_family "mono"

define logger NYCQ_logger
	set ignore_missing "no"
	set description "Logs experimental data"
	set auto_log "no"
	set use_quotes "no"
	log "slider_percent"
	log "question_de"
	log "question_en"
	log "question_id"

define sequence training_sequence
	run set_trial_variables "always"
	run show_and_collect_response "always"
	run prepare_feedback_message "always"
	run feedback "always"

define inline_script prepare_feedback_message
	___run__
	shape = self.experiment.get("trial_shape")
	response = self.experiment.get("response")
	response_time = self.experiment.get("response_time")
	print shape, response, response_time
	
	feedback_message = correct_msg
	feedback_colour = "green"
	
	if (shape != "red_square" and response == "space") or (shape == "red_square" and response != "space"):
		feedback_message = incorrect_msg
		feedback_colour = "red"
		
	self.experiment.set("feedback_message", feedback_message)
	self.experiment.set("feedback_colour", feedback_colour)
	__end__
	___prepare__
	correct_msg = self.experiment.get("correct_msg")
	incorrect_msg = self.experiment.get("incorrect_msg")
	__end__
	set description "Executes Python code"

define loop loop
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "sequence"
	set column_order "bogus"
	set cycles "320"
	set order "sequential"
	setcycle 0 bogus ""
	run sequence

